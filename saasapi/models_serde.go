//go:build go1.18
// +build go1.18

// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.1, generator: @autorest/go@4.0.0-preview.43)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package saasapi

import (
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// MarshalJSON implements the json.Marshaller interface for type AADIdentifier.
func (a AADIdentifier) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "emailId", a.EmailID)
	populate(objectMap, "objectId", a.ObjectID)
	populate(objectMap, "puid", a.Puid)
	populate(objectMap, "tenantId", a.TenantID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AADIdentifier.
func (a *AADIdentifier) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "emailId":
				err = unpopulate(val, "EmailID", &a.EmailID)
				delete(rawMsg, key)
		case "objectId":
				err = unpopulate(val, "ObjectID", &a.ObjectID)
				delete(rawMsg, key)
		case "puid":
				err = unpopulate(val, "Puid", &a.Puid)
				delete(rawMsg, key)
		case "tenantId":
				err = unpopulate(val, "TenantID", &a.TenantID)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type FulfillmentInternalServerErrorResponse.
func (f FulfillmentInternalServerErrorResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "error", f.Error)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type FulfillmentInternalServerErrorResponse.
func (f *FulfillmentInternalServerErrorResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", f, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "error":
				err = unpopulate(val, "Error", &f.Error)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", f, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type FulfillmentInternalServerErrorResponseError.
func (f FulfillmentInternalServerErrorResponseError) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", f.Code)
	populate(objectMap, "message", f.Message)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type FulfillmentInternalServerErrorResponseError.
func (f *FulfillmentInternalServerErrorResponseError) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", f, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "code":
				err = unpopulate(val, "Code", &f.Code)
				delete(rawMsg, key)
		case "message":
				err = unpopulate(val, "Message", &f.Message)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", f, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MeteringDimension.
func (m MeteringDimension) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "currency", m.Currency)
	populate(objectMap, "displayName", m.DisplayName)
	populate(objectMap, "id", m.ID)
	populate(objectMap, "pricePerUnit", m.PricePerUnit)
	populate(objectMap, "unitOfMeasure", m.UnitOfMeasure)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MeteringDimension.
func (m *MeteringDimension) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "currency":
				err = unpopulate(val, "Currency", &m.Currency)
				delete(rawMsg, key)
		case "displayName":
				err = unpopulate(val, "DisplayName", &m.DisplayName)
				delete(rawMsg, key)
		case "id":
				err = unpopulate(val, "ID", &m.ID)
				delete(rawMsg, key)
		case "pricePerUnit":
				err = unpopulate(val, "PricePerUnit", &m.PricePerUnit)
				delete(rawMsg, key)
		case "unitOfMeasure":
				err = unpopulate(val, "UnitOfMeasure", &m.UnitOfMeasure)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MeteringedQuantityIncluded.
func (m MeteringedQuantityIncluded) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dimensionId", m.DimensionID)
	populate(objectMap, "units", m.Units)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MeteringedQuantityIncluded.
func (m *MeteringedQuantityIncluded) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "dimensionId":
				err = unpopulate(val, "DimensionID", &m.DimensionID)
				delete(rawMsg, key)
		case "units":
				err = unpopulate(val, "Units", &m.Units)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Operation.
func (o Operation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "action", o.Action)
	populate(objectMap, "activityId", o.ActivityID)
	populate(objectMap, "id", o.ID)
	populate(objectMap, "offerId", o.OfferID)
	populate(objectMap, "planId", o.PlanID)
	populate(objectMap, "publisherId", o.PublisherID)
	populate(objectMap, "quantity", o.Quantity)
	populate(objectMap, "status", o.Status)
	populate(objectMap, "subscriptionId", o.SubscriptionID)
	populateTimeRFC3339(objectMap, "timeStamp", o.TimeStamp)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Operation.
func (o *Operation) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", o, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "action":
				err = unpopulate(val, "Action", &o.Action)
				delete(rawMsg, key)
		case "activityId":
				err = unpopulate(val, "ActivityID", &o.ActivityID)
				delete(rawMsg, key)
		case "id":
				err = unpopulate(val, "ID", &o.ID)
				delete(rawMsg, key)
		case "offerId":
				err = unpopulate(val, "OfferID", &o.OfferID)
				delete(rawMsg, key)
		case "planId":
				err = unpopulate(val, "PlanID", &o.PlanID)
				delete(rawMsg, key)
		case "publisherId":
				err = unpopulate(val, "PublisherID", &o.PublisherID)
				delete(rawMsg, key)
		case "quantity":
				err = unpopulate(val, "Quantity", &o.Quantity)
				delete(rawMsg, key)
		case "status":
				err = unpopulate(val, "Status", &o.Status)
				delete(rawMsg, key)
		case "subscriptionId":
				err = unpopulate(val, "SubscriptionID", &o.SubscriptionID)
				delete(rawMsg, key)
		case "timeStamp":
				err = unpopulateTimeRFC3339(val, "TimeStamp", &o.TimeStamp)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", o, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type OperationList.
func (o OperationList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "operations", o.Operations)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type OperationList.
func (o *OperationList) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", o, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "operations":
				err = unpopulate(val, "Operations", &o.Operations)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", o, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Plan.
func (p Plan) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", p.Description)
	populate(objectMap, "displayName", p.DisplayName)
	populate(objectMap, "hasFreeTrials", p.HasFreeTrials)
	populate(objectMap, "isPricePerSeat", p.IsPricePerSeat)
	populate(objectMap, "isPrivate", p.IsPrivate)
	populate(objectMap, "isStopSell", p.IsStopSell)
	populate(objectMap, "market", p.Market)
	populate(objectMap, "planComponents", p.PlanComponents)
	populate(objectMap, "planId", p.PlanID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Plan.
func (p *Plan) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", p, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "description":
				err = unpopulate(val, "Description", &p.Description)
				delete(rawMsg, key)
		case "displayName":
				err = unpopulate(val, "DisplayName", &p.DisplayName)
				delete(rawMsg, key)
		case "hasFreeTrials":
				err = unpopulate(val, "HasFreeTrials", &p.HasFreeTrials)
				delete(rawMsg, key)
		case "isPricePerSeat":
				err = unpopulate(val, "IsPricePerSeat", &p.IsPricePerSeat)
				delete(rawMsg, key)
		case "isPrivate":
				err = unpopulate(val, "IsPrivate", &p.IsPrivate)
				delete(rawMsg, key)
		case "isStopSell":
				err = unpopulate(val, "IsStopSell", &p.IsStopSell)
				delete(rawMsg, key)
		case "market":
				err = unpopulate(val, "Market", &p.Market)
				delete(rawMsg, key)
		case "planComponents":
				err = unpopulate(val, "PlanComponents", &p.PlanComponents)
				delete(rawMsg, key)
		case "planId":
				err = unpopulate(val, "PlanID", &p.PlanID)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", p, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PlanComponents.
func (p PlanComponents) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "meteringDimensions", p.MeteringDimensions)
	populate(objectMap, "recurrentBillingTerms", p.RecurrentBillingTerms)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PlanComponents.
func (p *PlanComponents) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", p, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "meteringDimensions":
				err = unpopulate(val, "MeteringDimensions", &p.MeteringDimensions)
				delete(rawMsg, key)
		case "recurrentBillingTerms":
				err = unpopulate(val, "RecurrentBillingTerms", &p.RecurrentBillingTerms)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", p, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type RecurrentBillingTerm.
func (r RecurrentBillingTerm) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "currency", r.Currency)
	populate(objectMap, "meteredQuantityIncluded", r.MeteredQuantityIncluded)
	populate(objectMap, "price", r.Price)
	populate(objectMap, "termDescription", r.TermDescription)
	populate(objectMap, "termUnit", r.TermUnit)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RecurrentBillingTerm.
func (r *RecurrentBillingTerm) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "currency":
				err = unpopulate(val, "Currency", &r.Currency)
				delete(rawMsg, key)
		case "meteredQuantityIncluded":
				err = unpopulate(val, "MeteredQuantityIncluded", &r.MeteredQuantityIncluded)
				delete(rawMsg, key)
		case "price":
				err = unpopulate(val, "Price", &r.Price)
				delete(rawMsg, key)
		case "termDescription":
				err = unpopulate(val, "TermDescription", &r.TermDescription)
				delete(rawMsg, key)
		case "termUnit":
				err = unpopulate(val, "TermUnit", &r.TermUnit)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ResolvedSubscription.
func (r ResolvedSubscription) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", r.ID)
	populate(objectMap, "offerId", r.OfferID)
	populate(objectMap, "planId", r.PlanID)
	populate(objectMap, "quantity", r.Quantity)
	populate(objectMap, "subscription", r.Subscription)
	populate(objectMap, "subscriptionName", r.SubscriptionName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ResolvedSubscription.
func (r *ResolvedSubscription) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
				err = unpopulate(val, "ID", &r.ID)
				delete(rawMsg, key)
		case "offerId":
				err = unpopulate(val, "OfferID", &r.OfferID)
				delete(rawMsg, key)
		case "planId":
				err = unpopulate(val, "PlanID", &r.PlanID)
				delete(rawMsg, key)
		case "quantity":
				err = unpopulate(val, "Quantity", &r.Quantity)
				delete(rawMsg, key)
		case "subscription":
				err = unpopulate(val, "Subscription", &r.Subscription)
				delete(rawMsg, key)
		case "subscriptionName":
				err = unpopulate(val, "SubscriptionName", &r.SubscriptionName)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SubscriberPlan.
func (s SubscriberPlan) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "planId", s.PlanID)
	populate(objectMap, "quantity", s.Quantity)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SubscriberPlan.
func (s *SubscriberPlan) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "planId":
				err = unpopulate(val, "PlanID", &s.PlanID)
				delete(rawMsg, key)
		case "quantity":
				err = unpopulate(val, "Quantity", &s.Quantity)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Subscription.
func (s Subscription) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowedCustomerOperations", s.AllowedCustomerOperations)
	populate(objectMap, "autoRenew", s.AutoRenew)
	populate(objectMap, "beneficiary", s.Beneficiary)
	populateTimeRFC3339(objectMap, "created", s.Created)
	populate(objectMap, "fulfillmentId", s.FulfillmentID)
	populate(objectMap, "id", s.ID)
	populate(objectMap, "isFreeTrial", s.IsFreeTrial)
	populate(objectMap, "isTest", s.IsTest)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "offerId", s.OfferID)
	populate(objectMap, "planId", s.PlanID)
	populate(objectMap, "publisherId", s.PublisherID)
	populate(objectMap, "purchaser", s.Purchaser)
	populate(objectMap, "quantity", s.Quantity)
	populate(objectMap, "saasSubscriptionStatus", s.SaasSubscriptionStatus)
	populate(objectMap, "sandboxType", s.SandboxType)
	populate(objectMap, "sessionId", s.SessionID)
	populate(objectMap, "sessionMode", s.SessionMode)
	populate(objectMap, "storeFront", s.StoreFront)
	populate(objectMap, "term", s.Term)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Subscription.
func (s *Subscription) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "allowedCustomerOperations":
				err = unpopulate(val, "AllowedCustomerOperations", &s.AllowedCustomerOperations)
				delete(rawMsg, key)
		case "autoRenew":
				err = unpopulate(val, "AutoRenew", &s.AutoRenew)
				delete(rawMsg, key)
		case "beneficiary":
				err = unpopulate(val, "Beneficiary", &s.Beneficiary)
				delete(rawMsg, key)
		case "created":
				err = unpopulateTimeRFC3339(val, "Created", &s.Created)
				delete(rawMsg, key)
		case "fulfillmentId":
				err = unpopulate(val, "FulfillmentID", &s.FulfillmentID)
				delete(rawMsg, key)
		case "id":
				err = unpopulate(val, "ID", &s.ID)
				delete(rawMsg, key)
		case "isFreeTrial":
				err = unpopulate(val, "IsFreeTrial", &s.IsFreeTrial)
				delete(rawMsg, key)
		case "isTest":
				err = unpopulate(val, "IsTest", &s.IsTest)
				delete(rawMsg, key)
		case "name":
				err = unpopulate(val, "Name", &s.Name)
				delete(rawMsg, key)
		case "offerId":
				err = unpopulate(val, "OfferID", &s.OfferID)
				delete(rawMsg, key)
		case "planId":
				err = unpopulate(val, "PlanID", &s.PlanID)
				delete(rawMsg, key)
		case "publisherId":
				err = unpopulate(val, "PublisherID", &s.PublisherID)
				delete(rawMsg, key)
		case "purchaser":
				err = unpopulate(val, "Purchaser", &s.Purchaser)
				delete(rawMsg, key)
		case "quantity":
				err = unpopulate(val, "Quantity", &s.Quantity)
				delete(rawMsg, key)
		case "saasSubscriptionStatus":
				err = unpopulate(val, "SaasSubscriptionStatus", &s.SaasSubscriptionStatus)
				delete(rawMsg, key)
		case "sandboxType":
				err = unpopulate(val, "SandboxType", &s.SandboxType)
				delete(rawMsg, key)
		case "sessionId":
				err = unpopulate(val, "SessionID", &s.SessionID)
				delete(rawMsg, key)
		case "sessionMode":
				err = unpopulate(val, "SessionMode", &s.SessionMode)
				delete(rawMsg, key)
		case "storeFront":
				err = unpopulate(val, "StoreFront", &s.StoreFront)
				delete(rawMsg, key)
		case "term":
				err = unpopulate(val, "Term", &s.Term)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SubscriptionPlans.
func (s SubscriptionPlans) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "plans", s.Plans)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SubscriptionPlans.
func (s *SubscriptionPlans) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "plans":
				err = unpopulate(val, "Plans", &s.Plans)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SubscriptionTerm.
func (s SubscriptionTerm) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "endDate", s.EndDate)
	populateTimeRFC3339(objectMap, "startDate", s.StartDate)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SubscriptionTerm.
func (s *SubscriptionTerm) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endDate":
				err = unpopulateTimeRFC3339(val, "EndDate", &s.EndDate)
				delete(rawMsg, key)
		case "startDate":
				err = unpopulateTimeRFC3339(val, "StartDate", &s.StartDate)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SubscriptionsResponse.
func (s SubscriptionsResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "@nextLink", s.NextLink)
	populate(objectMap, "subscriptions", s.Subscriptions)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SubscriptionsResponse.
func (s *SubscriptionsResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "@nextLink":
				err = unpopulate(val, "NextLink", &s.NextLink)
				delete(rawMsg, key)
		case "subscriptions":
				err = unpopulate(val, "Subscriptions", &s.Subscriptions)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type UpdateOperation.
func (u UpdateOperation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "planId", u.PlanID)
	populate(objectMap, "quantity", u.Quantity)
	populate(objectMap, "status", u.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type UpdateOperation.
func (u *UpdateOperation) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", u, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "planId":
				err = unpopulate(val, "PlanID", &u.PlanID)
				delete(rawMsg, key)
		case "quantity":
				err = unpopulate(val, "Quantity", &u.Quantity)
				delete(rawMsg, key)
		case "status":
				err = unpopulate(val, "Status", &u.Status)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", u, err)
		}
	}
	return nil
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, fn string, v interface{}) error {
	if data == nil {
		return nil
	}
	if err := json.Unmarshal(data, v); err != nil {
		return fmt.Errorf("struct field %s: %v", fn, err)
	}
	return nil
}

